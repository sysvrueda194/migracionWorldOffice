/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import Codigo.CargaCompras;
import Codigo.cargaVentas;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author USER
 */
public class Entrada_Informacion_Excel extends javax.swing.JFrame {

    private static DefaultTableModel modelo;
    private TableRowSorter trsFiltro;
    public String DireccionArchivo;
    private final JFileChooser FileChooser = new JFileChooser();
    public Salida_informacion_excel SIE = new Salida_informacion_excel();
    public Salida_informacion_terceros SIT = new Salida_informacion_terceros();
    DefaultTableModel modelo_base_iva_excento = (DefaultTableModel) SIE.getJT_Exportacion().getModel();
    DefaultTableModel modelo_terceros = (DefaultTableModel) SIT.getJT_Terceros().getModel();
    public String[] ciudades;
    CargaCompras CC = new CargaCompras();
    cargaVentas CV = new cargaVentas();

    /**
     * Creates new form Entrada_Informacion_Excel
     */
    public Entrada_Informacion_Excel() {
        initComponents();
        cargaCiudad();
        //muestraCiudad();
    }

    public static DefaultTableModel getModelo() {
        return modelo;
    }

    public static void setModelo(DefaultTableModel modelo) {
        Entrada_Informacion_Excel.modelo = modelo;
    }

    public TableRowSorter getTrsFiltro() {
        return trsFiltro;
    }

    public void setTrsFiltro(TableRowSorter trsFiltro) {
        this.trsFiltro = trsFiltro;
    }

    public String getDireccionArchivo() {
        return DireccionArchivo;
    }

    public void setDireccionArchivo(String DireccionArchivo) {
        this.DireccionArchivo = DireccionArchivo;
    }

    public Salida_informacion_excel getSIE() {
        return SIE;
    }

    public void setSIE(Salida_informacion_excel SIE) {
        this.SIE = SIE;
    }

    public Salida_informacion_terceros getSIT() {
        return SIT;
    }

    public void setSIT(Salida_informacion_terceros SIT) {
        this.SIT = SIT;
    }

    public DefaultTableModel getModelo_base_iva_excento() {
        return modelo_base_iva_excento;
    }

    public void setModelo_base_iva_excento(DefaultTableModel modelo_base_iva_excento) {
        this.modelo_base_iva_excento = modelo_base_iva_excento;
    }

    public DefaultTableModel getModelo_terceros() {
        return modelo_terceros;
    }

    public void setModelo_terceros(DefaultTableModel modelo_terceros) {
        this.modelo_terceros = modelo_terceros;
    }

    public String[] getCiudades() {
        return ciudades;
    }

    public void setCiudades(String[] ciudades) {
        this.ciudades = ciudades;
    }

    public JButton getBTN_creacionArchivosImportacion() {
        return BTN_creacionArchivosImportacion;
    }

    public void setBTN_creacionArchivosImportacion(JButton BTN_creacionArchivosImportacion) {
        this.BTN_creacionArchivosImportacion = BTN_creacionArchivosImportacion;
    }

    public JButton getBTN_seleccionArchivo() {
        return BTN_seleccionArchivo;
    }

    public void setBTN_seleccionArchivo(JButton BTN_seleccionArchivo) {
        this.BTN_seleccionArchivo = BTN_seleccionArchivo;
    }

    public JTable getJT_Importacion() {
        return JT_Importacion;
    }

    public void setJT_Importacion(JTable JT_Importacion) {
        this.JT_Importacion = JT_Importacion;
    }

    public JTextField getTXT_nitEmpresa() {
        return TXT_nitEmpresa;
    }

    public void setTXT_nitEmpresa(JTextField TXT_nitEmpresa) {
        this.TXT_nitEmpresa = TXT_nitEmpresa;
    }

    public JTextField getTXT_nombreEmpresa() {
        return TXT_nombreEmpresa;
    }

    public void setTXT_nombreEmpresa(JTextField TXT_nombreEmpresa) {
        this.TXT_nombreEmpresa = TXT_nombreEmpresa;
    }

    public JButton getjButton1() {
        return jButton1;
    }

    public void setjButton1(JButton jButton1) {
        this.jButton1 = jButton1;
    }

    public JScrollPane getjScrollPane1() {
        return jScrollPane1;
    }

    public void setjScrollPane1(JScrollPane jScrollPane1) {
        this.jScrollPane1 = jScrollPane1;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BG_tipoFactura = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        JT_Importacion = new javax.swing.JTable();
        BTN_seleccionArchivo = new javax.swing.JButton();
        BTN_creacionArchivosImportacion = new javax.swing.JButton();
        TXT_nombreEmpresa = new javax.swing.JTextField();
        TXT_nitEmpresa = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        JRB_facturaCompra = new javax.swing.JRadioButton();
        JRB_facturaVenta = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Importacion WORLD OFFICE // Carga archivo a importar");

        JT_Importacion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(JT_Importacion);

        BTN_seleccionArchivo.setText("carga archivo a importar");
        BTN_seleccionArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_seleccionArchivoActionPerformed(evt);
            }
        });

        BTN_creacionArchivosImportacion.setText("Crear Archivos para Importacion");
        BTN_creacionArchivosImportacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_creacionArchivosImportacionActionPerformed(evt);
            }
        });

        TXT_nombreEmpresa.setBorder(javax.swing.BorderFactory.createTitledBorder("Nombre de la Empresa Asignada"));

        TXT_nitEmpresa.setBorder(javax.swing.BorderFactory.createTitledBorder("NIT de la Empresa Asignada"));

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        JRB_facturaCompra.setText("Facturas de Compra");

        JRB_facturaVenta.setText("Facturas de Venta");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 788, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(TXT_nombreEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TXT_nitEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(BTN_seleccionArchivo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BTN_creacionArchivosImportacion)
                                .addGap(52, 52, 52)
                                .addComponent(jButton1)))
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(JRB_facturaCompra)
                            .addComponent(JRB_facturaVenta))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(TXT_nombreEmpresa)
                            .addComponent(TXT_nitEmpresa))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BTN_seleccionArchivo)
                            .addComponent(BTN_creacionArchivosImportacion)
                            .addComponent(jButton1)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JRB_facturaCompra)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JRB_facturaVenta)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BTN_seleccionArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_seleccionArchivoActionPerformed
        // TODO add your handling code here:
        File archivo = cargaArchivo();
        cargaTabla(archivo);
    }//GEN-LAST:event_BTN_seleccionArchivoActionPerformed

    private void BTN_creacionArchivosImportacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_creacionArchivosImportacionActionPerformed
        // TODO add your handling code here:
        if (JRB_facturaCompra.isSelected()) {
            CC.cargaModeloCompras();
        } else if (JRB_facturaVenta.isSelected()) {
            CV.cargaModelo();
        }
    }//GEN-LAST:event_BTN_creacionArchivosImportacionActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        for (int k = 0; k < modelo_terceros.getRowCount(); k++) {
            System.out.println(k + " // " + modelo_terceros.getValueAt(k, 1));
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Entrada_Informacion_Excel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Entrada_Informacion_Excel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup BG_tipoFactura;
    private javax.swing.JButton BTN_creacionArchivosImportacion;
    private javax.swing.JButton BTN_seleccionArchivo;
    private javax.swing.JRadioButton JRB_facturaCompra;
    private javax.swing.JRadioButton JRB_facturaVenta;
    private javax.swing.JTable JT_Importacion;
    private javax.swing.JTextField TXT_nitEmpresa;
    private javax.swing.JTextField TXT_nombreEmpresa;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private File cargaArchivo() {
        FileChooser.showDialog(null, "Importar Datos ");
        File file = FileChooser.getSelectedFile();
        DireccionArchivo = file.getAbsolutePath();
        char c1 = (char) 92;
        char c2 = (char) 47;
        System.out.println("char c1 = " + c1 + ", char c2 = " + c2);
        DireccionArchivo = DireccionArchivo.replace(c1, c2);
        System.out.println("Direccion Archivo Seleccionado = " + DireccionArchivo);
        return file;
    }

    private void cargaTabla(File archivo) {
        FileReader fr = null;
        BufferedReader br;
        br = null;
        try {
            // Apertura del fichero y creacion de BufferedReader para poder
            // hacer una lectura comoda (disponer del metodo readLine()).
            fr = new FileReader(archivo);
            br = new BufferedReader(fr);
            // Lectura del fichero
            String linea;
            DefaultListModel model_lista = new DefaultListModel();
            DefaultTableModel model_tabla = new DefaultTableModel();
            String inicio = br.readLine();
            String[] columnas = inicio.split(";");
            for (String columna1 : columnas) {
                model_tabla.addColumn(columna1);
            }
            while ((linea = br.readLine()) != null) {
                String[] data = linea.split(";");
                model_tabla.addRow(data);
            }
            //jList1.setModel(model_lista);
            JT_Importacion.setModel(model_tabla);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (null != fr) {
                    fr.close();
                }
            } catch (IOException e2) {
                e2.printStackTrace();
            }
        }
    }

    private void cargaCiudad() {
        String entrada;
        String linea;
        boolean read = false;
        int j = 0;
        File file = new File("src/Archivos/Ciudades_World_Office2.csv");
        System.out.println(file.getAbsolutePath());
        System.out.println("Archivo de Ciudades Cargado");
        if (file.canRead()) {
            read = true;
            System.out.println("El archivo se puede leer");
        } else {
            read = false;
            System.out.println("No es posible leer el archivo");
        }
        if (read) {
            FileReader fr = null;
            BufferedReader br;
            br = null;
            try {
                fr = new FileReader(file);
                br = new BufferedReader(fr);
                entrada = br.readLine();
                while ((linea = br.readLine()) != null) {
                    entrada = entrada + ";" + linea;
                }
                ciudades = entrada.split(";");
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                try {
                    if (null != fr) {
                        fr.close();
                    }
                } catch (IOException e2) {
                    e2.printStackTrace();
                }
            }
        }
    }

    private void muestraCiudad() {
        for (String ciudade : ciudades) {
            System.out.println(ciudade);
        }
    }

}
